import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode

TOKEN = "8246901324:AAH3FHDKTJpVwPi66aZGU1PBv6R22WxPQL0"

QUEUE_FILE = "queue.json"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

def load_queue():
    try:
        with open(QUEUE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_queue(queue):
    with open(QUEUE_FILE, "w", encoding="utf-8") as f:
        json.dump(queue, f, ensure_ascii=False, indent=2)

@dp.message(Command("standup"))
async def standup(msg: types.Message):
    q = load_queue()
    user = msg.from_user.username

    if user in q:
        return await msg.reply("–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ ‚úÖ")

    q.append(user)
    save_queue(q)
    await msg.reply(f"–î–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å. –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏: {len(q)} —á–µ–ª–æ–≤–µ–∫(–∞).")

@dp.message(Command("delete"))
async def delete_me(msg: types.Message):
    q = load_queue()
    user = msg.from_user.username

    if user not in q:
        return await msg.reply("–¢–µ–±—è –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ üòâ")

    q.remove(user)
    save_queue(q)
    await msg.reply("–£–¥–∞–ª–∏–ª —Ç–µ–±—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")

@dp.message(Command("list"))
async def list_queue(msg: types.Message):
    q = load_queue()
    if not q:
        return await msg.reply("–°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏. –ù–∞–ø–∏—à–∏ /standup, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    txt = "\n".join([f"{i+1}) @{u}" for i, u in enumerate(q)])
    await msg.reply(f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n{txt}")

@dp.message(Command("finished"))
async def finished(msg: types.Message):
    q = load_queue()
    user = msg.from_user.username

    if not q:
        return await msg.reply("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è.")

    if q[0] != user:
        return await msg.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏ üôÇ")

    # —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ
    q.pop(0)
    save_queue(q)

    # –µ—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞—è ‚Äî —Ç–µ–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
    if q:
        next_user = q[0]
        await msg.answer(f"@{next_user} —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

