import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

TOKEN = "8246901324:AAH3FHDKTJpVwPi66aZGU1PBv6R22WxPQL0"

bot = Bot(token=TOKEN)
dp = Dispatcher()

QUEUE_FILE = "queue.json"

# –¢–∞–π–º–∏–Ω–≥–∏
FIRST_REMINDER = 5 * 60   # 5 –º–∏–Ω—É—Ç
SECOND_REMINDER = 5 * 60  # –µ—â—ë 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ
REPORT_TIMEOUT = 30 * 60  # 30 –º–∏–Ω—É—Ç –≤ –æ—Ç—á—ë—Ç–µ
RESPONSE_TIMEOUT = 10 * 60  # 10 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ "—Ç—ã –µ—â—ë –≤ –æ—Ç—á—ë—Ç–µ?"


# ------------------- –†–∞–±–æ—Ç–∞ —Å –æ—á–µ—Ä–µ–¥—å—é -------------------
def load_queue():
    if os.path.exists(QUEUE_FILE):
        with open(QUEUE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


def save_queue(queue):
    with open(QUEUE_FILE, "w", encoding="utf-8") as f:
        json.dump(queue, f, ensure_ascii=False, indent=2)


# ------------------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è -------------------
async def remind_to_take_report(chat_id, message_thread_id, user_id, username):
    await asyncio.sleep(FIRST_REMINDER)
    queue = load_queue()

    if not queue or queue[0]["id"] != user_id or queue[0]["status"] != "waiting":
        return

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É —É–∂–µ –Ω–∞–ø–æ–º–Ω–∏–ª–∏
    queue[0]["reminded"] = True
    save_queue(queue)

    await bot.send_message(
        chat_id,
        f"@{username}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! –ï—Å–ª–∏ –Ω–µ –Ω–∞–∂–º–µ—à—å /takereport –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, —è –±—É–¥—É –≤—ã–Ω—É–∂–¥–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ç–µ–±—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏üòî.",
        message_thread_id=message_thread_id
    )

    await asyncio.sleep(SECOND_REMINDER)
    queue = load_queue()
    if not queue or queue[0]["id"] != user_id or queue[0]["status"] != "waiting":
        return

    queue.pop(0)
    save_queue(queue)
    await bot.send_message(
        chat_id,
        f"@{username}, —è —É—Å—Ç–∞–ª –∂–¥–∞—Ç—å —Ç–µ–±—è –∏ —É–¥–∞–ª–∏–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ü´£, –ø—Ä–æ—Å—Ç–∏–∏–∏. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏ /standup",
        message_thread_id=message_thread_id
    )

    if queue:
        next_user = queue[0]["username"]
        await bot.send_message(
            chat_id,
            f"üî• @{next_user}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! –ö–æ–≥–¥–∞ –∑–∞–π–¥–µ—à—å –≤ –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏ /takereport",
            message_thread_id=message_thread_id
        )


async def remind_user_in_report(chat_id, message_thread_id, user_id, username):
    await asyncio.sleep(REPORT_TIMEOUT)
    queue = load_queue()

    if not queue or queue[0]["id"] != user_id or queue[0]["status"] != "in_progress":
        return

    await bot.send_message(
        chat_id,
        f"@{username}, —Ç—ã –µ—â–µ –≤ –æ—Ç—á–µ—Ç–µ? –ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏ /da, –µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏ /no",
        message_thread_id=message_thread_id
    )

    queue[0]["awaiting_response"] = True
    save_queue(queue)

    await asyncio.sleep(RESPONSE_TIMEOUT)
    queue = load_queue()

    if queue and queue[0]["id"] == user_id and queue[0].get("awaiting_response"):
        queue.pop(0)
        save_queue(queue)
        await bot.send_message(
            chat_id,
            f"@{username}, —è –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —É–¥–∞–ª–∏–ª —Ç–µ–±—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ü´£, –ø—Ä–æ—Å—Ç–∏–∏–∏. "
            f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏ /standup",
            message_thread_id=message_thread_id
        )
        if queue:
            next_user = queue[0]["username"]
            await bot.send_message(
                chat_id,
                f"üî• @{next_user}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! –ö–æ–≥–¥–∞ –∑–∞–π–¥–µ—à—å –≤ –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏ /takereport",
                message_thread_id=message_thread_id
            )


# ------------------- –ö–æ–º–∞–Ω–¥—ã -------------------
@dp.message(Command("standup"))
async def cmd_standup(message: types.Message):
    queue = load_queue()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    message_thread_id = message.message_thread_id
    chat_id = message.chat.id

    if any(u["id"] == user_id for u in queue):
        await bot.send_message(chat_id, "–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ üëç", message_thread_id=message_thread_id)
        return

    queue.append({
        "id": user_id,
        "username": username,
        "status": "waiting",
        "reminded": False
    })
    save_queue(queue)

    position = len(queue)
    await bot.send_message(
        chat_id,
        f"–î–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å, —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è {position}. –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏ {len(queue)} —á–µ–ª–æ–≤–µ–∫(–∞).",
        message_thread_id=message_thread_id
    )

    if len(queue) == 1:
        await bot.send_message(
            chat_id,
            f"@{username}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! –ö–æ–≥–¥–∞ –∑–∞–π–¥–µ—à—å –≤ –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏ /takereport",
            message_thread_id=message_thread_id
        )
        asyncio.create_task(remind_to_take_report(chat_id, message_thread_id, user_id, username))


@dp.message(Command("takereport"))
async def cmd_takereport(message: types.Message):
    queue = load_queue()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    message_thread_id = message.message_thread_id
    chat_id = message.chat.id

    if not queue:
        await bot.send_message(chat_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è. –ß—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞–∂–º–∏ /standup.", message_thread_id=message_thread_id)
        return

    if queue[0]["id"] != user_id:
        await bot.send_message(chat_id, "–ù—É –∫—É–¥–∞ —Ç—ã, –ø–æ–∫–∞ –Ω–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å, –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å üòÖ", message_thread_id=message_thread_id)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É "–°–ª–∞–≤–∞ –±–æ–≥—É —Ç—ã –ø—Ä–∏—à—ë–ª" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª reminder
    if queue[0].get("reminded"):
        await bot.send_message(chat_id, "–°–ª–∞–≤–∞ –±–æ–≥—É —Ç—ã –ø—Ä–∏—à–µ–ª(–ª–∞)üòÇ", message_thread_id=message_thread_id)
        queue[0]["reminded"] = False

    queue[0]["status"] = "in_progress"
    queue[0]["awaiting_response"] = False
    save_queue(queue)

    await bot.send_message(chat_id, "–¢—ã –≤–∑—è–ª(–∞) –æ—Ç—á–µ—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ /finished", message_thread_id=message_thread_id)
    asyncio.create_task(remind_user_in_report(chat_id, message_thread_id, user_id, username))


@dp.message(Command("finished"))
async def cmd_finished(message: types.Message):
    queue = load_queue()
    user_id = message.from_user.id
    message_thread_id = message.message_thread_id
    chat_id = message.chat.id

    if not queue:
        await bot.send_message(chat_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è. –ß—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å, –Ω–∞–∂–º–∏ /standup.", message_thread_id=message_thread_id)
        return

    if queue[0]["id"] != user_id:
        await bot.send_message(chat_id, "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è, –Ω–æ —Ç—ã –Ω–µ –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–≥–æ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ üòÅ", message_thread_id=message_thread_id)
        return

    queue.pop(0)
    save_queue(queue)

    if not queue:
        await bot.send_message(
            chat_id,
            "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, –∏ —è —Å–∫—É—á–∞—é üò¢ –ù–∞–∂–º–∏ /standup, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å.",
            message_thread_id=message_thread_id
        )
    else:
        next_user = queue[0]["username"]
        await bot.send_message(
            chat_id,
            f"üî• @{next_user}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! –ö–æ–≥–¥–∞ –∑–∞–π–¥–µ—à—å –≤ –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏ /takereport",
            message_thread_id=message_thread_id
        )


@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    queue = load_queue()
    message_thread_id = message.message_thread_id
    chat_id = message.chat.id

    if not queue:
        await bot.send_message(chat_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è. –ß—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å, –Ω–∞–∂–º–∏ /standup.", message_thread_id=message_thread_id)
        return

    text = "–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n"
    for i, u in enumerate(queue, start=1):
        status = " (–≤ –æ—Ç—á—ë—Ç–µ)" if u["status"] == "in_progress" else ""
        text += f"{i}. @{u['username']}{status}\n"
    await bot.send_message(chat_id, text, message_thread_id=message_thread_id)


@dp.message(Command("delete"))
async def cmd_delete(message: types.Message):
    queue = load_queue()
    user_id = message.from_user.id
    message_thread_id = message.message_thread_id
    chat_id = message.chat.id

    if not queue or not any(u["id"] == user_id for u in queue):
        await bot.send_message(chat_id, "–¢–µ–±—è –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ üò≥", message_thread_id=message_thread_id)
        return

    if queue[0]["id"] == user_id:
        await bot.send_message(
            chat_id,
            "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–µ–±—è —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥. "
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /takereport –∏ –ø–æ—Ç–æ–º /finished, —Ç–∞–∫ —Ç—ã –æ—Ç–¥–∞—à—å –æ—á–µ—Ä–µ–¥—å —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.",
            message_thread_id=message_thread_id
        )
        return

    queue = [u for u in queue if u["id"] != user_id]
    save_queue(queue)
    await bot.send_message(chat_id, "–ù—É –≤–æ—Ç –±–ª–∏–Ω, –ø–æ—Ç–µ—Ä—è–ª–∏ –±–æ–π—Ü–∞ üòÖ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏ /standup", message_thread_id=message_thread_id)


# ------------------- –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ /da –∏ /no -------------------
@dp.message(Command("da"))
async def cmd_da(message: types.Message):
    queue = load_queue()
    message_thread_id = message.message_thread_id
    chat_id = message.chat.id

    if not queue:
        return

    user_id = message.from_user.id
    if queue[0]["id"] == user_id and queue[0].get("awaiting_response"):
        queue[0]["awaiting_response"] = False
        save_queue(queue)
        await bot.send_message(chat_id, "–•–æ—Ä–æ—à–æ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –ø—Ä–∞–≤–∫–∏, –Ω–∞–∂–º–∏ /finished", message_thread_id=message_thread_id)
        asyncio.create_task(remind_user_in_report(chat_id, message_thread_id, user_id, queue[0]["username"]))


@dp.message(Command("no"))
async def cmd_no(message: types.Message):
    queue = load_queue()
    message_thread_id = message.message_thread_id
    chat_id = message.chat.id

    if not queue:
        return

    user_id = message.from_user.id
    if queue[0]["id"] == user_id:
        username = queue[0]["username"]
        queue.pop(0)
        save_queue(queue)
        await bot.send_message(chat_id, "–¢–∞–∫, —Ç–∞–∫, –∞ –º—ã —Ç—É—Ç –≤—Å–µ –∂–¥—ë–º —Ç–µ–±—èüò≠ –õ–∞–¥–Ω–æ, —Å–ø–∞—Å–∏–±–æ, –ø–µ—Ä–µ–¥–∞—é –æ—á–µ—Ä–µ–¥—å –¥—Ä—É–≥–æ–º—É.", message_thread_id=message_thread_id)
        if queue:
            next_user = queue[0]["username"]
            await bot.send_message(
                chat_id,
                f"üî• @{next_user}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! –ö–æ–≥–¥–∞ –∑–∞–π–¥–µ—à—å –≤ –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏ /takereport",
                message_thread_id=message_thread_id
            )


# ------------------- –ó–∞–ø—É—Å–∫ -------------------
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))

